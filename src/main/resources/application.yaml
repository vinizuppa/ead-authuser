#server:
#  port: 8087 #Porta que vai rodar a aplica��o
#  servlet:
#    context-path: '/ead-authuser/' #Define o nome do caminho da aplicação para ser encontrada pelo API Gateway
#
spring:
  application:
    name: ead-authuser-service
  config: #Configuração de conexão com o Config Server
    import: 'optional:configserver:' #O optional:, define que caso o config server não esteja disponível, será utilizado as configurações desse arquivo.
  cloud:
    config:
      discovery:
        service-id: ead-config-server
      username: configserver
      password: 'ead123cs'
#  datasource:
#    url: jdbc:postgresql://localhost:5432/ead-authuser-v2 #Url de acesso ao banco de dados
#    username: postgres #Usuario do banco
#    password: root #Senha do banco
#
#  jpa:
#    hibernate:
#      ddl-auto: update #O update indica ao spring para criar as tabelas no banco de acordo com os models
#      dialect: org.hibernate.dialect.PostgreSQLDialect
#      jdbc:
#        lob.non-contextual-creation: true #Desabilita consulta a alguns metadados que podem gerar erros nos logs
#
#    properties:
#      hibernate:
#        show_sql: true #Mostra comandos SQL que est�o sendo executados na aplica��o nos logs
#
#  output:
#    ansi:
#      enabled: always #Define para aparecer as cores dos logs no console do Windows também(padrão ANSI de cores).
#
#  rabbitmq:
#    addresses: amqps://asepknsw:AkZI1YjGQhqp8qSAFcm56tHkiXyiOjiE@shark.rmq.cloudamqp.com/asepknsw #Endereço do rabbitMq para comunicação com a instancia do Broker.
#
#logging:
#  level:
#    com.ead: TRACE #Define o nível de log que será utilizado na aplicação.
#    root: INFO #Definimos para toda raiz da aplicação, para ser utilizado o INFO em todas classes.
#    org.springframework.web: DEBUG #Define o nível de log para um pacote especifico
#    org.hibernate: INFO
#
#ead:
#  api:
#    url:
#      course: 'http://ead-course-service/ead-course' #Define URL do microservice course. Nesse caso passamos o Id Eureka correspondente ao microservice desejado.
#  broker:
#    exchange:
#      userEvent: ead.userevent #Define o nome do Exchange, para as outras filas se conectarem com esse exchange para receber mensagens.
#eureka: #Configurações do Eureka
#  client:
#    service-url:
#      defaultZone: 'http://localhost:8761/eureka' #Endereço onde o eureka server está
#  instance:
#      hostname: localhost
#
#resilience4j:
#  circuitbreaker:
#    instances:
#      circuitbreakerInstance:
#        slidingWindowSize: 30 #Periodo que irá ser analisado pelo CircuitBreacker(30 segundos).
#        permittedNumberOfCallsInHalfOpenState: 2 #Número de requisições que irão ficar em estado MEIO ABERTO.
#        slidingWindowType: TIME_BASED #Define que o CircuitBreacker ira se basear em tempo.(Pode ser definido para funcionar por tempo, ou por contagens).
#        minimumNumberOfCalls: 2 #Limite de chamadas para iniciar analise.
#        waitDurationInOpenState: 30s #Periodo que o estado ira ficar em ABERTO.
#        failureRateThreshold: 80 #Taxa de falha, para no periodo de analise do Circuit Breacker, caso 80% ou mais das chamadas tenha dado sucesso ou erro, define o estado(aberto ou fechado).
#
#  retry:
#    instances:
#      retryInstance:
#        maxRetryAttempts: 3 #Limite máximo de tentativas
#        waitDuration: 5 #Duração entre uma tentativa e outra.